---
- name: Ensure current_device and visited_devices are defined
  set_fact:
    current_device: "{{ current_device | default(inventory_hostname) }}"
    visited_devices: "{{ visited_devices | default([]) }}"

- name: Add current device to visited list
  set_fact:
    visited_devices: "{{ visited_devices + [current_device] }}"
  when: current_device not in visited_devices

- name: Search for MAC address on Cisco devices
  ios_command:
    commands:
      - "show mac address-table | include {{ item }}"
  with_items: "{{ mac_addresses }}"
  register: ios_mac_search
  when: ansible_network_os == 'ios' and inventory_hostname == current_device

- name: Search for MAC address on Aruba devices
  cli_command:
    command: "show mac-address-table | include {{ item }}"
  with_items: "{{ mac_addresses }}"
  register: aruba_mac_search
  when: ansible_network_os == 'aruba' and inventory_hostname == current_device

- name: Combine MAC search results
  set_fact:
    mac_search_results: >-
      {{
        (ios_mac_search.results | default([])) if ansible_network_os == 'ios'
        else (aruba_mac_search.results | default([]))
      }}

- name: Debug MAC search results on {{ current_device }}
  debug:
    var: mac_search_results

- name: Extract interfaces from MAC search results
  set_fact:
    mac_interfaces: >-
      {{
        mac_search_results
        | map(attribute='stdout')
        | map('join')          
        | map('regex_search', '([A-Za-z]+[0-9/]+)$')
        | reject('equalto', None)
        | list
      }}

- name: Debug found interfaces on {{ current_device }}
  debug:
    var: mac_interfaces

- name: Fail if no MAC found on {{ current_device }}
  fail:
    msg: "MAC address not found on device {{ current_device }}, stop recursion."
  when: mac_interfaces | length == 0

- name: Run CDP neighbors query on Cisco devices
  ios_command:
    commands:
      - "show cdp neighbors {{ item }} detail"
  with_items: "{{ mac_interfaces }}"
  register: cdp_results
  when: ansible_network_os == 'ios'

- name: Run LLDP neighbors query on Aruba devices
  cli_command:
    command: "show lldp neighbors interface {{ item }}"
  with_items: "{{ mac_interfaces }}"
  register: lldp_results
  when: ansible_network_os == 'aruba'

- name: Extract CDP neighbor info
  set_fact:
    neighbors: >-
      {{
        (cdp_results.results | map(attribute='stdout') | map('join') | map('regex_findall', 'Device ID: (\\S+).*?IP address: (\\S+)', multiline=True)) | list | flatten
      }}
  when: ansible_network_os == 'ios' and cdp_results is defined

- name: Extract LLDP neighbor info
  set_fact:
    neighbors: >-
      {{
        (lldp_results.results | map(attribute='stdout') | map('join') | map('regex_findall', 'System Name: (\\S+).*?Management Address: (\\S+)', multiline=True)) | list | flatten
      }}
  when: ansible_network_os == 'aruba' and lldp_results is defined

- name: Debug neighbors found on {{ current_device }}
  debug:
    var: neighbors

- name: Debug if no neighbors found
  debug:
    msg: "? No CDP/LLDP neighbors found on {{ current_device }}, stopping here."
  when: neighbors | length == 0

- name: Filter out already visited devices
  set_fact:
    new_neighbors: "{{ [] }}"

- name: Filter unvisited neighbors (manual loop for 2.9)
  set_fact:
    new_neighbors: "{{ new_neighbors + [item] }}"
  with_items: "{{ neighbors }}"
  when: item[1] not in visited_devices

- name: Debug new neighbors to recurse into
  debug:
    var: new_neighbors

- name: Add dynamic hosts for new neighbors
  add_host:
    name: "{{ item[1] }}"
    ansible_host: "{{ item[1] }}"
    ansible_network_os: "{{ ansible_network_os }}"
  with_items: "{{ new_neighbors }}"
  when: new_neighbors | length > 0

- name: Recurse into each new neighbor
  include_tasks: mac_search_recurse.yml
  with_items: "{{ new_neighbors }}"
  vars:
    current_device: "{{ item[1] }}"
    visited_devices: "{{ visited_devices + [item[1]] }}"
  when: new_neighbors | length > 0
