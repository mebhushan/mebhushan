---
- name: Ensure current_device and visited_devices are defined
  set_fact:
    current_device: "{{ current_device | default(inventory_hostname) }}"
    visited_devices: "{{ visited_devices | default([]) }}"

- name: Add current device to visited list
  set_fact:
    visited_devices: "{{ visited_devices + [current_device] }}"
  when: current_device not in visited_devices

- name: Search for MAC address on Cisco devices
  ios_command:
    commands:
      - "show mac address-table | include {{ item }}"
  with_items: "{{ mac_addresses }}"
  register: ios_mac_search
  when: ansible_network_os == 'ios' and inventory_hostname == current_device

- name: Search for MAC address on Aruba devices
  cli_command:
    command: "show mac-address-table | include {{ item }}"
  with_items: "{{ mac_addresses }}"
  register: aruba_mac_search
  when: ansible_network_os == 'aruba' and inventory_hostname == current_device

- name: Combine MAC search results
  set_fact:
    mac_search_results: >-
        {{
          (ios_mac_search.results if ios_mac_search is defined else [])
          if ansible_network_os == 'ios'
          else (aruba_mac_search.results if aruba_mac_search is defined else [])
        }}
      # {{
      #   (ios_mac_search.results | default([])) if ansible_network_os == 'ios'
      #   else (aruba_mac_search.results | default([]))
      # }}

- name: Debug MAC search results on {{ current_device }}
  debug:
    var: mac_search_results

- name: Extract interfaces from MAC search results
  set_fact:
    mac_interfaces: >-
      {{
        mac_search_results
        | map(attribute='stdout')
        | map('join')          
        | map('regex_search', '([A-Za-z0-9]+[0-9/]+)$')
        | reject('equalto', None)
        | list
      }}

- name: Debug found interfaces on {{ current_device }}
  debug:
    var: mac_interfaces

- name: Debug if MAC not found {{ current_device }}
  debug:
    msg: "NO MAC address  found on  {{ current_device }} for the given  MAC List:  {{ mac_addresses }}"
  when: mac_interfaces | length == 0

- name: Fail if no MAC found on {{ current_device }}
  fail:
    msg: "MAC address not found on device {{ current_device }}, stop recursion."
  when: mac_interfaces | length == 0

- name: Debug if MAC found on {{ current_device }}
  debug:
    msg: " MAC address  found on  {{ current_device }}. Interfaces:  {{ mac_interfaces }}"
  when: mac_interfaces | length > 0

- name: Run CDP neighbors query on Cisco devices
  ios_command:
    commands:
      - "show cdp neighbors {{ item }} detail"
  with_items: "{{ mac_interfaces }}"
  register: cdp_results
  when: ansible_network_os == 'ios'

- name: Run LLDP neighbors query on Aruba devices
  cli_command:
    command: "show lldp neighbors interface {{ item }}"
  with_items: "{{ mac_interfaces }}"
  register: lldp_results
  when: ansible_network_os == 'aruba'

- name: Extract CDP neighbor info
  set_fact:
    neighbors: >-
      {{
        (cdp_results.results | map(attribute='stdout') | map('join') | map('regex_findall', 'Device ID: (\\S+).*?IP address: (\\S+)', multiline=True)) | list | flatten
      }}
  when: ansible_network_os == 'ios' and cdp_results is defined

- name: Extract LLDP neighbor info
  set_fact:
    neighbors: >-
      {{
        (lldp_results.results | map(attribute='stdout') | map('join') | map('regex_findall', 'System Name: (\\S+).*?Management Address: (\\S+)', multiline=True)) | list | flatten
      }}
  when: ansible_network_os == 'aruba' and lldp_results is defined

- name: Debug CDP/LLDP neighbors
  debug: 
    msg: "CDP/LLDP neighbor {{ item }}"
  with_items: "{{ neighbors }}"
  when: neighbors is defined and neighbors | length > 0

- name: Debug neighbors found on {{ current_device }}
  debug:
    var: neighbors

- name: Debug if no neighbors found
  debug:
    msg: "? No CDP/LLDP neighbors found on {{ current_device }}, stopping here connected to end-device."
  when: neighbors | length == 0

- name: Filter out already visited devices
  set_fact:
    new_neighbors: "{{ [] }}"

- name: Filter unvisited neighbors (manual loop for 2.9)
  set_fact:
    new_neighbors: "{{ new_neighbors + [item] }}"
  with_items: "{{ neighbors }}"
  when: item[1] not in visited_devices

- name: Debug new neighbors to recurse into
  debug:
    var: new_neighbors

- name: Add dynamic hosts for new neighbors
  add_host:
    name: "{{ item[1] }}"
    ansible_host: "{{ item[1] }}"
    ansible_network_os: >-
       {{
          'aruba' if 'Aruba' in item[0] else 'ios'       
       }}
  with_items: "{{ new_neighbors }}"
  when: new_neighbors | length > 0

- name: Recurse into each new neighbor
  include_tasks: mac_search_recurse.yml
  with_items: "{{ new_neighbors }}"
  vars:
    current_device: "{{ item[1] }}"
    visited_devices: "{{ visited_devices + [item[1]] }}"
  when: new_neighbors | length > 0

- name: Debug CDP/LLDP neighbors
  debug:
    msg: "MAC tracing complete on all reachable neighbors from {{ inventory_hostname }}"
  when: new-neighbors | length == 0  


Input a MAC address.
Search for the MAC address on the first device (could be Cisco or Aruba).
When the MAC is found on a specific interface, run a CDP (for Cisco) or LLDP (for Aruba) neighbor query on that interface.
Extract the neighbor deviceâ€™s name and IP address from that query.
Log in to the neighbor device (whether Cisco or Aruba) and repeat the MAC address search.
Continue recursively until the MAC is found on a port with no neighbor (endpoint device).
 

