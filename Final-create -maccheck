---
- name: Add device to visited list
  set_fact:
    visited_devices: "{{ visited_devices + [inventory_hostname] }}"
  when: inventory_hostname not in visited_devices

- name: Get MAC address table
  ios_command:
    commands:
      - "show mac address-table"
  register: mac_output

- name: Search for MACs in table
  set_fact:
    found_macs: "{{ mac_list | select('search', mac_output.stdout[0]) | list }}"

- name: Notify MAC result
  debug:
    msg: >-
      {% if found_macs | length > 0 %}
        ‚úÖ MAC(s) found: {{ found_macs }}
      {% else %}
        ‚ùå No MAC from {{ mac_list }} found on {{ inventory_hostname }}
      {% endif %}

- meta: end_play
  when: found_macs | length == 0

- name: Extract interface for first MAC
  set_fact:
    matched_line: "{{ mac_output.stdout[0].split('\n') | select('search', found_macs[0]) | list | first }}"
    mac_interface: "{{ matched_line.split()[-1] }}"

- name: Show CDP neighbor
  ios_command:
    commands:
      - "show cdp neighbors {{ mac_interface }} detail"
  register: cdp_output

- name: Extract neighbor hostname
  set_fact:
    neighbor_host: >-
      {{ (cdp_output.stdout[0] | regex_search('Device ID: (\\S+)', '\\1')) | default('') }}

- name: Notify neighbor result
  debug:
    msg: >-
      {% if neighbor_host != '' %}
        ü§ù Neighbor device found: {{ neighbor_host }}
      {% else %}
        üõë No neighbor found. End device: {{ inventory_hostname }}
      {% endif %}

- name: LOG and END if endpoint
  when: neighbor_host == ''
  debug:
    msg: "üìç End of path. No neighbor found on port {{ mac_interface }} of {{ inventory_hostname }}."

- name: Add neighbor to group
  when: neighbor_host != '' and neighbor_host not in visited_devices
  add_host:
    name: "{{ neighbor_host }}"
    groups: traced_hosts

- name: Include trace_mac.yml again for neighbor
  when: neighbor_host != '' and neighbor_host not in visited_devices
  delegate_to: "{{ neighbor_host }}"
  include_tasks: trace_mac.yml
